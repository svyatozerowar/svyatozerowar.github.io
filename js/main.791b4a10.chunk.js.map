{"version":3,"sources":["App.js","Search.js","serviceWorker.js","index.js"],"names":["App","props","data","displayedContacts","length","react_default","a","createElement","ContactList","map","_ref","title","url","preview","yearslife","key","className","href","src","alt","person","cycle","Math","ceil","count","c","b","i","Fragment","inp","document","querySelector","CONTACTS","require","polyfill","Search","state","handleSearch","event","searchQuery","target","value","toLowerCase","filter","el","indexOf","_this","setState","_this2","this","fetch","then","res","json","cont","oninput","src_App","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Search","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOA2DeA,QAxDH,SAAAC,GAAS,IACZC,EAAQD,EAARC,KACP,GAAoC,MAAjCA,EAAKC,kBAAkBC,OACxB,OAAQC,EAAAC,EAAAC,cAAA,YAqBV,IAnBA,IAAMC,EAAcN,EAAKC,kBAAkBM,IAAI,SAAAC,GAAwC,IAArCC,EAAqCD,EAArCC,MAAOC,EAA8BF,EAA9BE,IAAKC,EAAyBH,EAAzBG,QAASC,EAAgBJ,EAAhBI,UACrE,OACIT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKH,EAAKI,UAAW,oBACxBX,EAAAC,EAAAC,cAAA,OAAKS,UAAW,iBACdX,EAAAC,EAAAC,cAAA,KAAGU,KAAML,GACPP,EAAAC,EAAAC,cAAA,OAAKW,IAAKL,EAASM,IAAI,KACvBd,EAAAC,EAAAC,cAAA,OAAKS,UAAW,cACbL,EADH,IACUN,EAAAC,EAAAC,cAAA,WADV,IACiBO,QAQzBM,EAAS,GACTC,EAAQC,KAAKC,KAAKf,EAAYJ,OAAO,GACrCoB,EAAQhB,EAAYJ,OACpBqB,EAAE,EACEC,EAAE,EAAGA,EAAEL,EAAOK,IACpB,KAAW,EAAKF,EAAOG,EAAI,CAEzB,IADAF,GADS,GAEJ,GAAKD,EAAM,CACdJ,EAAOM,GAAKrB,EAAAC,EAAAC,cAAA,OAAKQ,IAAKW,EAAGV,UAAW,OAAQR,EAAYiB,GAAIjB,EAAYiB,EAAE,GAAIjB,EAAYiB,EAAE,GAAIjB,EAAYiB,EAAE,IAC9GA,GAAG,EACH,MAEF,GAAGA,EAAE,GAAKD,EAAM,CACdJ,EAAOM,GAAKrB,EAAAC,EAAAC,cAAA,OAAKQ,IAAKW,EAAGV,UAAW,OAAQR,EAAYiB,GAAIjB,EAAYiB,EAAE,GAAIjB,EAAYiB,EAAE,IAC5FA,GAAG,EACH,MAEF,GAAGA,EAAE,GAAKD,EAAM,CACdJ,EAAOM,GAAKrB,EAAAC,EAAAC,cAAA,OAAKQ,IAAKW,EAAGV,UAAW,OAAQR,EAAYiB,GAAIjB,EAAYiB,EAAE,IAC1EA,GAAG,EACH,MAEF,GAAGA,GAAKD,EAAM,CACZJ,EAAOM,GAAKrB,EAAAC,EAAAC,cAAA,OAAKQ,IAAKW,EAAGV,UAAW,OAAQR,EAAYiB,IACxD,OAKN,OACEpB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsB,SAAA,KACGR,KChDHS,EAAMC,SAASC,cAAc,iBAE7BC,EAAW,GACfC,EAAQ,IAAeC,WACvBD,EAAQ,QA8BOE,6MA3BbC,MAAQ,CACNjC,kBAAmB6B,KAGrBK,aAAe,SAACC,GACd,IAAIC,EAAcD,EAAME,OAAOC,MAAMC,cACjCvC,EAAoB6B,EAASW,OAAO,SAAUC,GAEhD,OAA6C,IAD3BA,EAAGjC,MAAM+B,cACRG,QAAQN,KAE7BO,EAAKC,SAAS,CAAE5C,kBAAmBA,wFAGjB,IAAA6C,EAAAC,KAClBC,MAAM,iBACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAAQF,KAAK,SAAAjD,GAAI,OAAI8B,EAAW9B,IAAMiD,KAAK,SAAAG,GAAI,OAAIN,EAAKD,SAAS,CAAE5C,kBAAmBmD,MAEvGzB,EAAI0B,QAAUN,KAAKZ,8CAInB,OACIhC,EAAAC,EAAAC,cAACiD,EAAD,CAAKtD,KAAM+C,KAAKb,eAvBHqB,aCADC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAAYnC,SAASC,cAAc,eD0H7C,kBAAmBmC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.791b4a10.chunk.js","sourcesContent":["import React from 'react';\nimport './main.css'\n\nconst App = props => {\n  const {data} = props;\n  if(data.displayedContacts.length == null){\n    return (<div></div>)\n  }\n  const ContactList = data.displayedContacts.map(({ title, url, preview, yearslife }) => {\n    return (\n        <div key={url} className={'column column-25'}>\n          <div className={'preview-panel'}>\n            <a href={url}>\n              <img src={preview} alt=''/>\n              <div className={'post-title'}>\n                {title} <br/> {yearslife}\n              </div>\n            </a>\n          </div>\n        </div>\n    )\n  })\n\n  let person = [];\n  let cycle = Math.ceil(ContactList.length/4);\n  let count = ContactList.length;\n  let c=0;\n  for(let b=0; b<cycle; b++){\n    for (let i=0; i<count; i+3){\n      c+=i;\n      if(c+3 <= count){\n        person[b] = <div key={b} className={'row'}>{ContactList[c]}{ContactList[c+1]}{ContactList[c+2]}{ContactList[c+3]}</div>;\n        c+=4\n        break;\n      }\n      if(c+2 <= count){\n        person[b] = <div key={b} className={'row'}>{ContactList[c]}{ContactList[c+1]}{ContactList[c+2]}</div>;\n        c+=3\n        break;\n      }\n      if(c+1 <= count){\n        person[b] = <div key={b} className={'row'}>{ContactList[c]}{ContactList[c+1]}</div>;\n        c+=2;\n        break;\n      }\n      if(c <= count){\n        person[b] = <div key={b} className={'row'}>{ContactList[c]}</div>;\n        break;\n      }\n    }\n  }\n\n  return (\n    <>\n      {person}\n    </>\n  )\n}\n\nexport default App;","import React, { Component } from 'react';\nimport App from './App.js';\n//import './style.css';\nimport './main.css';\n//import CONTACTS from './search.json';\n\nlet inp = document.querySelector('.search-field');\n\nvar CONTACTS = {};\nrequire('es6-promise').polyfill();\nrequire('isomorphic-fetch');\n\nclass Search extends Component {\n  state = {\n    displayedContacts: CONTACTS\n  }\n\n  handleSearch = (event) => {\n    var searchQuery = event.target.value.toLowerCase();\n    var displayedContacts = CONTACTS.filter(function (el) {\n      var searchValue = el.title.toLowerCase();\n      return searchValue.indexOf(searchQuery) !== -1;\n    });\n    this.setState({ displayedContacts: displayedContacts });\n  }\n\n  componentDidMount() {\n    fetch(\"./search.json\")\n    .then(res => res.json()).then(data => CONTACTS = data).then(cont => this.setState({ displayedContacts: cont }))\n    //this.setState({ displayedContacts: CONTACTS });\n    inp.oninput = this.handleSearch;\n  }\n\n  render() {\n    return (\n        <App data={this.state}/>\n    );\n  }\n}\n\nexport default Search;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Search from './Search';\nimport * as serviceWorker from './serviceWorker';\n\n//ReactDOM.render(<Search />, document.getElementById('root'));\nReactDOM.render(<Search />, document.querySelector('.container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}